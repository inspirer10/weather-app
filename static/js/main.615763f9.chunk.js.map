{"version":3,"sources":["Input.js","countriesPL.js","Icons.js","Current.js","Day.js","Forecast.js","App.js","index.js"],"names":["Input","submitCity","cityName","className","onSubmit","type","name","placeholder","onChange","countriesPL","AF","AX","AL","DZ","AS","AD","AI","AQ","AO","AG","AR","AM","AW","AU","AT","AZ","BS","BH","BD","BB","BY","BE","BZ","BJ","BM","BT","BO","BQ","BA","BW","BV","BR","IO","BN","BG","BF","BI","CV","KH","CM","CA","KY","CF","TD","CL","CN","CX","CC","CO","KM","CG","CD","CK","CR","CI","HR","CU","CW","CY","CZ","DK","DJ","DM","DO","WE","EG","SV","GQ","ER","EE","SZ","ET","FK","FO","FJ","FI","FR","GF","PF","TF","GA","GM","GE","DE","GH","GI","GR","GL","GD","GP","GU","GT","GG","GN","GW","GY","HT","HM","VA","HN","HK","HU","IS","IN","ID","IR","IQ","IE","IM","IL","IT","JM","JP","JE","JO","KZ","KE","KI","KP","KR","KW","KG","LA","LV","LB","LS","LR","LY","LI","LT","LU","MO","MG","MW","MY","MV","ML","MT","MH","MQ","MR","MU","YT","MX","FM","MD","MC","MN","JA","MS","MA","MZ","MM","NA","NR","NP","NL","NC","NZ","NI","NE","NG","NU","NF","MK","MP","NO","OM","PK","PW","PS","PA","PG","PY","PE","PH","PN","PL","PT","PR","QA","RE","RO","RU","RW","BL","SH","KN","LC","MF","PM","VC","WS","SM","ST","SA","SN","RS","SC","SL","SG","SX","SK","SI","SB","SO","ZA","GS","SS","ES","LK","SD","SR","SJ","SE","CH","SY","TW","TJ","TZ","TH","TL","TG","TK","TO","TT","TN","TR","TM","TC","TV","UG","UA","AE","GB","US","UM","UY","UZ","VU","VE","VN","VG","VI","WF","EH","YE","ZM","ZW","Icons","icon","iconInfo","iconsList","key","hasOwnProperty","customIcon","Current","currentData","timezone","data","description","weather","city","temp","main","toFixed","humidity","pressure","feelsLike","feels_like","wind","speed","sunrise","sys","sunset","country","formatTime","daytime","Date","toISOString","replace","slice","countryFullName","a","dt","day","getDay","month","getMonth","getDate","currentDate","Day","forecastData","modTimezone","min","Math","round","max","x","date","Forecast","userLat","userLon","timezone_offset","days","daily","App","useState","initialLongitude","setInitialLongitude","initialLatidue","setInitialLatidue","initialData","coord","lon","lat","setData","setCity","forecast","setForecast","userLocation","setUserLocation","useEffect","setTimeout","document","querySelectorAll","forEach","section","style","opacity","display","querySelector","getCurrentData","axios","get","then","res","textContent","value","catch","err","console","warn","navigator","geolocation","getCurrentPosition","pos","crd","coords","geoApiUrl","latitude","longitude","fetch","json","code","message","enableHighAccuracy","timeout","maximumAge","e","target","input","preventDefault","height","item","classList","remove","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.615763f9.chunk.js","sourcesContent":["const Input = ({ submitCity, cityName }) => {\r\n    return (\r\n        <section className='city-input'>\r\n            <form onSubmit={submitCity}>\r\n                <div className='input-wrap'>\r\n                    <input\r\n                        type='text'\r\n                        name='name'\r\n                        placeholder='Wpisz nazwę miasta!'\r\n                        onChange={cityName}\r\n                    />\r\n                    <button\r\n                        type='submit'\r\n                        className='wi wi-solar-eclipse'\r\n                    ></button>\r\n                </div>\r\n                <p className='error-msg'></p>\r\n            </form>\r\n        </section>\r\n    );\r\n};\r\n\r\nexport default Input;\r\n","const countriesPL = {\r\n    AF: 'Afganistan',\r\n    AX: 'Wyspy Alandzkie',\r\n    AL: 'Albania',\r\n    DZ: 'Algeria',\r\n    AS: 'Samoa Amerykańskie',\r\n    AD: 'Andora',\r\n    AI: 'Anguilla',\r\n    AQ: 'Antarktyda',\r\n    AO: 'Angola',\r\n    AG: 'Antigua i Barbuda',\r\n    AR: 'Argentyna',\r\n    AM: 'Armenia',\r\n    AW: 'Aruba',\r\n    AU: 'Australia',\r\n    AT: 'Austria',\r\n    AZ: 'Azerbejdżan',\r\n    BS: 'Bahamy',\r\n    BH: 'Bahrajn',\r\n    BD: 'Bangladesz',\r\n    BB: 'Barbados',\r\n    BY: 'Białoruś',\r\n    BE: 'Belgia',\r\n    BZ: 'Belize',\r\n    BJ: 'Benin',\r\n    BM: 'Bermudy',\r\n    BT: 'Bhutan',\r\n    BO: 'Boliwia',\r\n    BQ: 'Sint Eustatius',\r\n    BA: 'Bośnia i Hercegowina',\r\n    BW: 'Botswana',\r\n    BV: 'Wyspa Bouveta',\r\n    BR: 'Brazylia',\r\n    IO: 'Bryt. Ter. Oceanu Indyjskiego',\r\n    BN: 'Brunei',\r\n    BG: 'Bułgaria',\r\n    BF: 'Burkina Faso',\r\n    BI: 'Burundi',\r\n    CV: 'Cabo Verde',\r\n    KH: 'Kambodża',\r\n    CM: 'Kamerun',\r\n    CA: 'Kanada',\r\n    KY: 'Kajmany',\r\n    CF: 'Republika Środkowoafrykańska',\r\n    TD: 'Czad',\r\n    CL: 'Chile',\r\n    CN: 'Chiny',\r\n    CX: 'Wyspa Bożego Narodzenia',\r\n    CC: 'Wyspy Kokosowe (Keelinga)',\r\n    CO: 'Kolumbia',\r\n    KM: 'Komory',\r\n    CG: 'Kongo',\r\n    CD: 'Demokratyczna Republika Konga',\r\n    CK: 'Wyspy Cooka',\r\n    CR: 'Kostaryka',\r\n    CI: 'Wybrzeże Kości Słoniowej',\r\n    HR: 'Chorwacja',\r\n    CU: 'Kuba',\r\n    CW: 'Curaçao',\r\n    CY: 'Cypr',\r\n    CZ: 'Czechy',\r\n    DK: 'Dania',\r\n    DJ: 'Dżibuti',\r\n    DM: 'Dominika',\r\n    DO: 'Republika Dominikany',\r\n    WE: 'Ekwador',\r\n    EG: 'Egipt',\r\n    SV: 'Salwador',\r\n    GQ: 'Gwinea Równikowa',\r\n    ER: 'Erytrea',\r\n    EE: 'Estonia',\r\n    SZ: 'Eswatini',\r\n    ET: 'Etiopia',\r\n    FK: 'Falklandy',\r\n    FO: 'Wyspy Owcze',\r\n    FJ: 'Fidżi',\r\n    FI: \"Finlandia\",\r\n    FR: 'Francja',\r\n    GF: 'Gujana Francuska',\r\n    PF: 'Polinezja Francuska',\r\n    TF: 'Francuskie Terytoria Południowe',\r\n    GA: 'Gabon',\r\n    GM: 'Gambia',\r\n    GE: 'Gruzja',\r\n    DE: 'Niemcy',\r\n    GH: 'Ghana',\r\n    GI: 'Gibraltar',\r\n    GR: 'Grecja',\r\n    GL: 'Grenlandia',\r\n    GD: 'Grenada',\r\n    GP: 'Gwadelupa',\r\n    GU: 'Guam',\r\n    GT: 'Gwatemala',\r\n    GG: 'Guernsey',\r\n    GN: 'Gwinea',\r\n    GW: 'Gwinea Bissau',\r\n    GY: 'Gujana',\r\n    HT: 'Haiti',\r\n    HM: 'Wyspy Heard i McDonalda',\r\n    VA: 'Stolica Apostolska',\r\n    HN: 'Honduras',\r\n    HK: 'Hongkong',\r\n    HU: 'Węgry',\r\n    IS: 'Islandia',\r\n    IN: 'Indie',\r\n    ID: 'Indonezja',\r\n    IR: 'Iran',\r\n    IQ: 'Irak',\r\n    IE: 'Irlandia',\r\n    IM: 'Wyspa Man',\r\n    IL: 'Izrael',\r\n    IT: 'Włochy',\r\n    JM: 'Jamajka',\r\n    JP: 'Japonia',\r\n    JE: 'Jersey',\r\n    JO: 'Jordan',\r\n    KZ: 'Kazachstan',\r\n    KE: 'Kenia',\r\n    KI: 'Kiribati',\r\n    KP: 'Korea Północna',\r\n    KR: 'Korea Południowa',\r\n    KW: 'Kuwejt',\r\n    KG: 'Kirgistan',\r\n    LA: 'Laos',\r\n    LV: 'Łotwa',\r\n    LB: 'Liban',\r\n    LS: 'Lesotho',\r\n    LR: 'Liberia',\r\n    LY: 'Libia',\r\n    LI: 'Liechtenstein',\r\n    LT: 'Litwa',\r\n    LU: 'Luksemburg',\r\n    MO: 'Macao',\r\n    MG: 'Madagaskar',\r\n    MW: 'Malawi',\r\n    MY: 'Malezja',\r\n    MV: 'Malediwy',\r\n    ML: 'Mali',\r\n    MT: 'Malta',\r\n    MH: 'Wyspy Marshalla',\r\n    MQ: 'Martinique',\r\n    MR: 'Mauretania',\r\n    MU: 'Mauritius',\r\n    YT: 'Majotta',\r\n    MX: 'Meksyk',\r\n    FM: 'Mikronezja',\r\n    MD: 'Mołdawia',\r\n    MC: 'Monako',\r\n    MN: 'Mongolia',\r\n    JA: 'Czarnogóra',\r\n    MS: 'Montserrat',\r\n    MA: 'Maroko',\r\n    MZ: 'Mozambik',\r\n    MM: 'Myanmar',\r\n    NA: 'Namibia',\r\n    NR: 'Nauru',\r\n    NP: 'Nepal',\r\n    NL: 'Holandia',\r\n    NC: 'Nowa Kaledonia',\r\n    NZ: 'Nowa Zelandia',\r\n    NI: 'Nikaragua',\r\n    NE: 'Niger',\r\n    NG: 'Nigeria',\r\n    NU: 'Niue',\r\n    NF: 'Wyspa Norfolk',\r\n    MK: 'Macedonia Północna',\r\n    MP: 'Mariany Północne',\r\n    NO: 'Norwegia',\r\n    OM: 'Oman',\r\n    PK: 'Pakistan',\r\n    PW: 'Palau',\r\n    PS: 'Palestyna, stan',\r\n    PA: 'Panama',\r\n    PG: 'Papua-Nowa Gwinea',\r\n    PY: 'Paragwaj',\r\n    PE: 'Peru',\r\n    PH: 'Filipiny',\r\n    PN: 'Pitcairn',\r\n    PL: 'Polska',\r\n    PT: 'Portugalia',\r\n    PR: 'Puerto Rico',\r\n    QA: 'Katar',\r\n    RE: 'Réunion',\r\n    RO: 'Rumunia',\r\n    RU: 'Rosja',\r\n    RW: 'Rwanda',\r\n    BL: 'Saint Barthélemy',\r\n    SH: 'Wyspa Świętej Heleny',\r\n    KN: 'Saint Kitts and Nevis',\r\n    LC: 'Saint Lucia',\r\n    MF: 'Saint Martin',\r\n    PM: 'Saint Pierre',\r\n    VC: 'Grenadyny',\r\n    WS: 'Samoa',\r\n    SM: 'San Marino',\r\n    ST: 'Wyspy Świętego Tomasza',\r\n    SA: 'Arabia Saudyjska',\r\n    SN: 'Senegal',\r\n    RS: 'Serbia',\r\n    SC: 'Seszele',\r\n    SL: 'Sierra Leone',\r\n    SG: 'Singapur',\r\n    SX: 'Sint Maarten',\r\n    SK: 'Słowacja',\r\n    SI: 'Słowenia',\r\n    SB: 'Wyspy Salomona',\r\n    SO: 'Somalia',\r\n    ZA: 'Republika Południowej Afryki',\r\n    GS: 'Georgia',\r\n    SS: 'Sudan Południowy',\r\n    ES: 'Hiszpania',\r\n    LK: 'Sri Lanka',\r\n    SD: 'Sudan',\r\n    SR: 'Surinam',\r\n    SJ: 'Svalbard i Jan Mayen',\r\n    SE: 'Szwecja',\r\n    CH: 'Szwajcaria',\r\n    SY: 'Syryjska Republika Arabska',\r\n    TW: 'Tajwan',\r\n    TJ: 'Tadżykistan',\r\n    TZ: 'Tanzania',\r\n    TH: 'Tajlandia',\r\n    TL: 'Timor Wschodni',\r\n    TG: 'Togo',\r\n    TK: 'Tokelau',\r\n    TO: 'Tonga',\r\n    TT: 'Trynidad i Tobago',\r\n    TN: 'Tunezja',\r\n    TR: 'Turcja',\r\n    TM: 'Turkmenistan',\r\n    TC: 'Wyspy Turks i Caicos',\r\n    TV: 'Tuvalu',\r\n    UG: 'Uganda',\r\n    UA: 'Ukraina',\r\n    AE: 'Zjednoczone Emiraty Arabskie',\r\n    GB: 'Wielka Brytania',\r\n    US: 'Stany Zjednoczone Ameryki',\r\n    UM: 'Dalekie Wyspy Mniejsze USA',\r\n    UY: 'Urugwaj',\r\n    UZ: 'Uzbekistan',\r\n    VU: 'Vanuatu',\r\n    VE: 'Wenezuela',\r\n    VN: 'Wietnam',\r\n    VG: 'Wyspy Dziewicze (Brytyjskie)',\r\n    VI: 'Wyspy Dziewicze (USA)',\r\n    WF: 'Wallis i Futuna',\r\n    EH: 'Sahara Zachodnia',\r\n    YE: 'Jemen',\r\n    ZM: 'Zambia',\r\n    ZW: 'Zimbabwe',\r\n}\r\n\r\nexport default countriesPL;","const Icons = ({iconInfo}) => {\r\n    const icon = iconInfo;\r\n\r\n    const iconsList = {\r\n        '01d': 'wi-day-sunny',\r\n        '02d': 'wi-day-cloudy',\r\n        '03d': 'wi-cloud',\r\n        '04d': 'wi-cloud',\r\n        '09d': 'wi-day-rain',\r\n        '10d': 'wi-day-rain-wind',\r\n        '11d': 'wi-day-thunderstorm',\r\n        '13d': 'wi-day-snow',\r\n        '50d': 'wi-day-fog',\r\n        '01n': 'wi-moon-new',\r\n        '02n': 'wi-night-partly-cloudy',\r\n        '03n': 'wi-night-cloudy',\r\n        '04n': 'wi-cloudy',\r\n        '09n': 'wi-night-rain',\r\n        '10n': 'wi-night-showers',\r\n        '11n': 'wi-night-storm-showers',\r\n        '13n': 'wi-night-snow',\r\n        '50n': 'wi-night-fog',\r\n    }\r\n\r\n    const customIcon = () => {\r\n        for (const key in iconsList) {\r\n            if (iconsList.hasOwnProperty(key)) {\r\n                if (icon === key) {\r\n                    return 'wi ' + iconsList[key];\r\n                }\r\n            };\r\n        };\r\n    };\r\n\r\n    return <i className={customIcon()}></i>\r\n};\r\n\r\nexport default Icons;","import countriesPL from './countriesPL';\r\nimport Icons from './Icons';\r\n\r\nconst Current = ({ currentData }) => {\r\n    if (!currentData.timezone) {\r\n        return <></>;\r\n    }\r\n\r\n    const data = currentData;\r\n    const description = data.weather[0].description;\r\n    const city = data.name;\r\n    const temp = data.main.temp.toFixed();\r\n    const humidity = data.main.humidity;\r\n    const pressure = data.main.pressure;\r\n    const feelsLike = data.main.feels_like.toFixed(0);\r\n    const wind = (data.wind.speed * 3.6).toFixed(1);\r\n    const sunrise = data.sys.sunrise;\r\n    const sunset = data.sys.sunset;\r\n    const icon = data.weather[0].icon;\r\n    const country = data.sys.country;\r\n\r\n    const countryFullName = () => {\r\n        for (const key in countriesPL) {\r\n            if (countriesPL.hasOwnProperty(key)) {\r\n                if (country === key) {\r\n                    return countriesPL[key];\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    const formatTime = (daytime) => {\r\n        const time = new Date(daytime * 1000 + data.timezone * 1000)\r\n            .toISOString()\r\n            .replace(/T/, ' ')\r\n            .replace(/\\..+/, '')\r\n            .slice(11, -3);\r\n        return time;\r\n    };\r\n\r\n    const currentDate = () => {\r\n        const a = new Date(data.dt * 1000 + data.timezone * 1000);\r\n        const days = [\r\n            'Niedziela',\r\n            'Poniedziałek',\r\n            'Wtorek',\r\n            'Środa',\r\n            'Czwartek',\r\n            'Piątek',\r\n            'Sobota',\r\n        ];\r\n        const months = [\r\n            'Stycznia',\r\n            'Lutego',\r\n            'Marca',\r\n            'Kwietnia',\r\n            'Maja',\r\n            'Czerwca',\r\n            'Lipca',\r\n            'Sierpnia',\r\n            'Września',\r\n            'Października',\r\n            'Listopada',\r\n            'Grudnia',\r\n        ];\r\n\r\n        const day = days[a.getDay()];\r\n        const month = months[a.getMonth()];\r\n        const time = `${day} ${a.getDate()} ${month}`;\r\n        return time;\r\n    };\r\n\r\n    return (\r\n        <section className='current-forecast hide'>\r\n            <div className='city'>\r\n                <h2>\r\n                    {city}, <span>{countryFullName()}</span>\r\n                </h2>\r\n                <p>{currentDate()}</p>\r\n            </div>\r\n            <div className='current-temp'>\r\n                <Icons iconInfo={icon} />\r\n                <div className='description'>\r\n                    <h2>{temp}°C</h2>\r\n                    <p>{description}</p>\r\n                </div>\r\n            </div>\r\n            <div className='current-others'>\r\n                <div className='temp'>\r\n                    <p>Odczuwalna temperatura</p>\r\n                    <h3>{feelsLike}°C</h3>\r\n                </div>\r\n                <div className='wind'>\r\n                    <p>Prędkość wiatru</p>\r\n                    <h3>{wind} km/h</h3>\r\n                </div>\r\n                <div className='sunrise'>\r\n                    <p>Wschód</p>\r\n                    <h3>{formatTime(sunrise)}</h3>\r\n                </div>\r\n                <div className='pressure'>\r\n                    <p>Ciśnienie</p>\r\n                    <h3>{pressure} hPa</h3>\r\n                </div>\r\n                <div className='humidity'>\r\n                    <p>Wilgotność</p>\r\n                    <h3>{humidity}%</h3>\r\n                </div>\r\n                <div className='sunset'>\r\n                    <p>Zachód</p>\r\n                    <h3>{formatTime(sunset)}</h3>\r\n                </div>\r\n            </div>\r\n        </section>\r\n    );\r\n};\r\n\r\nexport default Current;\r\n","import Icons from './Icons';\r\n\r\nconst Day = ({ forecastData, modTimezone }) => {\r\n    if (!forecastData) {\r\n        return <></>;\r\n    }\r\n\r\n    const data = forecastData;\r\n    const timezone = modTimezone;\r\n    const day = data.dt;\r\n    const min = Math.round(data.temp.min);\r\n    const max = Math.round(data.temp.max);\r\n    const icon = data.weather[0].icon;\r\n    const description = data.weather[0].description;\r\n\r\n    const date = (x) => {\r\n        const d = new Date(x * 1000 + timezone * 1000);\r\n        const days = [\r\n            'Niedziela',\r\n            'Poniedziałek',\r\n            'Wtorek',\r\n            'Środa',\r\n            'Czwartek',\r\n            'Piątek',\r\n            'Sobota',\r\n        ];\r\n\r\n        const day = days[d.getDay()];\r\n        const time = `${day}`;\r\n        return time;\r\n    };\r\n\r\n    return (\r\n        <div className='day hide'>\r\n            <h4>{date(day)}</h4>\r\n            <Icons iconInfo={icon} />\r\n            <p>\r\n                <span>{max}°C</span> <span>{min}°C</span>\r\n            </p>\r\n            <p className='description'>{description}</p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Day;\r\n","import Day from './Day';\r\nconst Forecast = ({ forecastData, userLat, userLon }) => {\r\n    if (!forecastData) {\r\n        return <></>;\r\n    }\r\n\r\n    const data = forecastData;\r\n    const timezone = data.timezone_offset;\r\n    const days = data.daily;\r\n\r\n    return (\r\n        <>\r\n            <section className='forecast'>\r\n                <Day forecastData={days[1]} modTimezone={timezone} />\r\n                <Day forecastData={days[2]} modTimezone={timezone} />\r\n                <Day forecastData={days[3]} modTimezone={timezone} />\r\n                <Day forecastData={days[4]} modTimezone={timezone} />\r\n                <Day forecastData={days[5]} modTimezone={timezone} />\r\n                <Day forecastData={days[6]} modTimezone={timezone} />\r\n                <Day forecastData={days[7]} modTimezone={timezone} />\r\n            </section>\r\n            <h1 className='user-coords'>\r\n                {userLat !== 0 && `Twoje współrzędne: `}\r\n                {userLat !== 0 && (\r\n                    <span>\r\n                        {userLat.toFixed(4)}, {userLon.toFixed(4)}\r\n                    </span>\r\n                )}\r\n            </h1>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Forecast;\r\n\r\n/*\r\n\r\n                {lat !== 0 &&\r\n                    'Twoje współrzędne: ' +\r\n                    (\r\n                        <span>\r\n                            {lat.toFixed(4)} {lon.toFixed(4)}\r\n                        </span>\r\n                    )}\r\n\r\n*/\r\n","import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\n\r\nimport Input from './Input';\r\nimport Current from './Current.js';\r\nimport Forecast from './Forecast';\r\n\r\nimport './css/weather-icons.min.css';\r\nimport './css/App.css';\r\nimport './css/Icons.css';\r\nimport './css/Input.css';\r\nimport './css/Current.css';\r\nimport './css/Forecast.css';\r\nimport './css/Rwd.css';\r\n\r\nconst App = () => {\r\n    const [initialLongitude, setInitialLongitude] = useState(0);\r\n    const [initialLatidue, setInitialLatidue] = useState(0);\r\n    const initialData = {\r\n        coord: {\r\n            lon: initialLongitude,\r\n            lat: initialLatidue,\r\n        },\r\n    };\r\n    const [data, setData] = useState(initialData);\r\n    const [city, setCity] = useState();\r\n    const [forecast, setForecast] = useState();\r\n    const [userLocation, setUserLocation] = useState('');\r\n\r\n    useEffect(() => {\r\n        setTimeout(() => {\r\n            if (initialLatidue !== 0 && initialLongitude !== 0) {\r\n                document.querySelectorAll('.hide').forEach((section) => {\r\n                    section.style.opacity = '1';\r\n                    section.style.display = 'block';\r\n                });\r\n                document.querySelector('.current-forecast').style.display =\r\n                    'flex';\r\n            }\r\n        }, 1500);\r\n    }, [initialLatidue, initialLongitude]);\r\n\r\n    const getCity = (e) => {\r\n        setCity(e.target.value);\r\n    };\r\n\r\n    const getForecastData = (lat, lon) => {\r\n        if (lat !== 0 && lon !== 0) {\r\n            axios\r\n                .get(\r\n                    `https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&exclude=hourly,current,minutely,alerts&appid=de310e87d3a7bcda1c723953103565a6&units=metric&lang=pl`\r\n                )\r\n                .then((res) => {\r\n                    setForecast(res.data);\r\n                })\r\n                .catch((err) => {\r\n                    console.warn(err);\r\n                });\r\n        }\r\n    };\r\n\r\n    const getCurrentData = (city) => {\r\n        axios\r\n            .get(\r\n                `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=de310e87d3a7bcda1c723953103565a6&units=metric&lang=pl`\r\n            )\r\n            .then((res) => {\r\n                //success\r\n                setData(res.data);\r\n                document.querySelector('.error-msg').textContent = '';\r\n                document.querySelector('.input-wrap input').value = '';\r\n            })\r\n            .catch((err) => {\r\n                if (initialLatidue && initialLongitude) {\r\n                    if (document.querySelector('input').value === '') {\r\n                        document.querySelector('.error-msg').textContent =\r\n                            'Musisz podać nazwę miasta!';\r\n                        console.warn(err);\r\n                    } else {\r\n                        document.querySelector('.error-msg').textContent =\r\n                            'Wpisz poprawną nazwę miasta!';\r\n                        console.warn(err);\r\n                    }\r\n                }\r\n            });\r\n    };\r\n\r\n    useEffect(() => {\r\n        const options = {\r\n            enableHighAccuracy: true,\r\n            timeout: 5000,\r\n            maximumAge: 0,\r\n        };\r\n        function success(pos) {\r\n            const crd = pos.coords;\r\n            const geoApiUrl = `https://api.bigdatacloud.net/data/reverse-geocode?latitude=${crd.latitude}&longitude=${crd.longitude}&localityLanguage=en&key=bdc_f4ea7cfe87684687a15dfa49d332a95d`;\r\n            fetch(geoApiUrl)\r\n                .then((res) => res.json())\r\n                .then((data) => {\r\n                    setInitialLongitude(data.longitude);\r\n                    setInitialLatidue(data.latitude);\r\n                    setUserLocation(data.city);\r\n                });\r\n        }\r\n        function error(err) {\r\n            console.warn(\r\n                `Access to your location denied ${err.code} - ${err.message}`\r\n            );\r\n        }\r\n\r\n        navigator.geolocation.getCurrentPosition(success, error, options);\r\n        getCurrentData(userLocation);\r\n    }, [userLocation]);\r\n\r\n    const submitCity = (e) => {\r\n        const input = document.querySelector('.city-input');\r\n        e.preventDefault();\r\n        city !== '' && getCurrentData(city);\r\n        input.style.height = 'auto';\r\n\r\n        setCity('');\r\n\r\n        setTimeout(() => {\r\n            const days = document.querySelectorAll('.hide');\r\n            days.forEach((item) => {\r\n                item.classList.remove('hide');\r\n            });\r\n        }, 1500);\r\n    };\r\n\r\n    useEffect(() => {\r\n        getForecastData(data.coord.lat, data.coord.lon);\r\n    }, [data.coord.lat, data.coord.lon]);\r\n\r\n    return (\r\n        <>\r\n            <Input cityName={getCity} submitCity={submitCity} />\r\n            <Current currentData={data} />\r\n            <Forecast\r\n                forecastData={forecast}\r\n                userLat={initialData.coord.lat}\r\n                userLon={initialData.coord.lon}\r\n            />\r\n        </>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './css/index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App />\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);"],"sourceRoot":""}